#!/usr/bin/env python
# coding: utf-8

from argparse import ArgumentParser
import glob
import sys
#import re
#import csv
import pandas as pd


args = ArgumentParser('./combine_star_counts.py', description="""This program
has been designed to combine the counts generated by the RNA-seq aligner,
STAR. By default, three files will be output: one containing unstranded read counts,
one containing first-read counts, and one containing second-read counts.

Example usage: ./combine_star_counts.py -c *ReadsPerGene.out.tab -o Human
""")

args.add_argument(
	'-c',
	'--count_files',
	nargs='+', # This tells the program that if they specify this flag, they have to give it at least one input. If they don't specify it, then the default will go in.
	help="""\
	This is an optional way to use the command line to list the ReadsPerGene.out.tab
	files generated by STAR. These files typically end in 'ReadsPerGene.out.tab'.
	If you do use this option to specify the count files, all files ending in
	'ReadsPerGene.out.tab' in your current working directory will be used.""",
	default=None
)

args.add_argument(
	'-o',
	'--output_prefix',
	help="""This is the prefix that will be used for the output files. Default is
	'Combined' """,
	default='Combined',
)

args = args.parse_args()
count_files = args.count_files
output_prefix = args.output_prefix

def error_message():
	print()
	print("""\tThis program
	has been designed to combine the counts generated by the RNA-seq aligner,
	STAR. """)
	print("""\tBy default, three files will be output: """)
	print("\t1) unstranded read counts")
	print("\t2) first-read counts")
	print("\t3) second-read counts")
	print()
	print("\tExample usage: ./combine_star_counts.py c *ReadsPerGene.out.tab -o Human")
	print()

if not count_files:
	count_files = glob.glob("*ReadsPerGene.out.tab")
	if len(count_files) > 0:
		print()
		print("\tYou have not specified any STAR count files to parse.")
		print()
		print("\tParsing files ending in 'ReadsPerGene.out.tab' from your current working directory.")
		print()

if len(count_files) == 0:
	error_message()
	print("\tNo STAR count files were specified or found in your current working directory.")
	print()
	print("""\tPlease specify input files using the -c option or run combine_star_counts.py
	from a directory containing STAR count files.""")
	print()
	sys.exit(1)

count_files.sort()
Unstranded = pd.DataFrame()
First_Read = pd.DataFrame()
Second_Read = pd.DataFrame()
sample_names = []
for file in count_files:
	sample_names.append(file.replace('ReadsPerGene.out.tab', ''))
	all_three_counts = pd.read_csv(file, sep='\t', header=None, index_col=0)
	Unstranded = pd.concat([Unstranded, all_three_counts[[1]]], axis = 1)
	First_Read = pd.concat([First_Read, all_three_counts[[2]]], axis = 1)
	Second_Read = pd.concat([Second_Read, all_three_counts[[3]]], axis = 1)

Unstranded.columns =  sample_names
First_Read.columns =  sample_names
Second_Read.columns =  sample_names

Unstranded.to_csv(output_prefix+".Unstranded_Counts.csv")
First_Read.to_csv(output_prefix+".First_Read_Counts.csv")
Second_Read.to_csv(output_prefix+".Second_Read_Counts.csv")
